### Computes the first 25 elements of the Fibonacci sequence
### R3 is reserved for results
### R4 is reserved for acc
### R5 is always for loading and using constants
### R6 is reserved for printing

# Major steps (i.e. "function calls")
## Major impl steps
### Minor impl steps

# Store 0 at 0x0030 and new line char at 0x0031
LOADC R1, 10
STORE 0x0030, R1

# R1 = 0
LOADC R1, 0
# Print R1
## Calc digit 5
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0000, R5
LOADC R1, 0
ADD R1, R2, R1
## Calc digit 4
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0002, R5
LOADC R1, 0
ADD R1, R2, R1
## Calc digit 3
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0004, R5
LOADC R1, 0
ADD R1, R2, R1
## Calc digit 2
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0006, R5
LOADC R1, 0
ADD R1, R2, R1
## Calc digit 1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0008, R5
LOADC R1, 0
ADD R1, R2, R1
## Print digit 1, 2, 3, 4, 5, then '\n'
CPRINT 0x0009
CPRINT 0x0007
CPRINT 0x0005
CPRINT 0x0003
CPRINT 0x0001
CPRINT 0x0031

# R1 = 1
LOADC R1, 1
# Print R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0000, R5
LOADC R1, 0
ADD R1, R2, R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0002, R5
LOADC R1, 0
ADD R1, R2, R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0004, R5
LOADC R1, 0
ADD R1, R2, R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0006, R5
LOADC R1, 0
ADD R1, R2, R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0008, R5
LOADC R1, 0
ADD R1, R2, R1
CPRINT 0x0009
CPRINT 0x0007
CPRINT 0x0005
CPRINT 0x0003
CPRINT 0x0001
CPRINT 0x0031

# R1 = 0
LOADC R1, 0
# R2 = 1
LOADC R2, 1
# R4 = 2 (Printed 2 of 25 elements)
LOADC R4, 2
# R3 = R1 + R2
ADD R1, R2, R3

# print R3
## Save reg state
STORE 0x0010, R1
STORE 0x0012, R2
STORE 0x0014, R3
STORE 0x0016, R4
STORE 0x0018, R5
STORE 0x001a, R6
## R1 = old R3
LOAD R1, 0x0014
## Print R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0000, R5
LOADC R1, 0
ADD R1, R2, R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0002, R5
LOADC R1, 0
ADD R1, R2, R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0004, R5
LOADC R1, 0
ADD R1, R2, R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0006, R5
LOADC R1, 0
ADD R1, R2, R1
LOADC R5, 10
LOADC R6, 48
DIV R1, R5, R2
MUL R2, R5, R3
SUB R1, R3, R4
ADD R4, R6, R5
STORE 0x0008, R5
LOADC R1, 0
ADD R1, R2, R1
CPRINT 0x0009
CPRINT 0x0007
CPRINT 0x0005
CPRINT 0x0003
CPRINT 0x0001
## Restore reg state
LOAD R1, 0x0010
LOAD R2, 0x0012
LOAD R3, 0x0014
LOAD R4, 0x0016
LOAD R5, 0x0018
LOAD R6, 0x001a
# increment R4
LOADC R5, 1
ADD R5, R4, R4
# if R4 = 25
LOADC R5, 25
EQ R4, R5, R5
# "break" / "exit"
GOTOIF 0x02d8, R5
# else reset and loop
## print newline
CPRINT 0x0031
## R1 = R2
ADD R2, R5, R1
## R2 = R3
ADD R3, R5, R2
## loop
GOTO 0x01b4
# done
EXIT
